-@SpringBootApplication - annotation is a core annotation in Spring Boot that is used to mark the main class of a Spring
Boot application. This annotation serves as a convenient combination of three other annotations, enabling quick and easy
configuration: @Configuration, @EnableAutoConfiguration, @ComponentScan.

-@ComponentScan - We mark the main configuration class with this annotation and provide path where we need spring to
scan components for bean creation.
-@Component - mark classes as component for which you want spring to handle its obj creations and destruction
-@Autowired - The @Autowired annotation in Spring is used for dependency injection, where Spring automatically injects an
    instance of the required dependency into a class. When you annotate a field, constructor, or setter method with
    @Autowired, Spring looks for a bean that matches the dependency's type and injects it at runtime. This makes it
    easier to manage dependencies between classes without needing to manually instantiate them.
-@Primary - If there are two beans of the same type, you can specify which one to inject using @Primary on the bean with @Autowired.
-@Qualifier - If there are multiple beans of the same type, you can specify which one to inject @Qualifier with @Autowired.
-@EnableAutoConfiguration - This enables Spring Boot’s auto-configuration feature, which automatically configures your
application based on the dependencies present in the classpath. For example, if you have spring-boot-starter-web on the
classpath, it will automatically set up a Spring MVC application.

Java Based Configuration
-@Configuration - Marks a class as a source of bean definitions, which Spring will process to manage dependency injection.
-@Bean - Declares a method that will return an object to be managed as a Spring bean within the application context.
-@Scope - By default singleton and we can pass scope type @Bean("prototype")

-@Value - Is used to inject values directly into fields, methods, or constructor parameters from external sources,
such as properties files, environment variables, or inline expressions

Spring Stereotype annotations
-@Service - is used to mark a class as a service layer component. This annotation serves to indicate that the class
contains business logic, which typically handles the core processing and transactional operations of an application.
Classes annotated with @Service are detected during component scanning, making them Spring beans that are automatically
registered in the Spring application context.
-@Repository - is used to mark a class as a data access layer component, which deals with database interactions.
This makes the class eligible for Spring’s component scanning.
-@Controller - It is use to mark the class as a controller, meaning it can map HTTP requests to specific methods and
return data in view format (.jsp)
-@ResponseBody - It is used to indicate that the return value of a method should be written directly to the HTTP response
body as JSON format, rather than being treated as a view name or path for rendering.
-@RestController - Its combination of @Controller and @ResponseBody

org.springframework.http
@ResponseEntity is a class that represents the entire HTTP response, including the status code, headers,
and body. It is a flexible and powerful way to customize and control the HTTP response sent from a Spring controller.

org.springframework.web.bind.annotation
@RequestMapping - In Spring Boot is used to map HTTP requests to specific handler methods in your controllers. It is a
versatile annotation that can be used at both the class and method levels to define the URL path, request method, and
other request properties.
@GetMapping
@PostMapping
@PutMapping
@DeleteMapping

@RequestParam - It is used to extract query parameters from the URL of an HTTP request and bind them to method parameters
in a controller. It is typically used in RESTful APIs to retrieve optional or required values from the query string.
@PathVariable - The @PathVariable annotation in Spring is used to extract values from the URI path and bind them directly
to method parameters in a controller. It’s commonly used in RESTful applications where parts of the URL path represent
resource identifiers, making it ideal for accessing dynamic data directly from URLs.
@RequestBody - The @RequestBody annotation in Spring is used to bind the HTTP request body to a Java object. It allows
you to directly map JSON, XML, or other formats in the request body into a Java object for easier handling
@RequestPart - It is an annotation in Spring Framework used to bind a part of a multipart request to a method parameter.
It is typically used when handling file uploads or when you need to process individual parts of a multipart HTTP request.

@ModelAttribute - It is used to bind a method parameter or a method return value to a named model attribute, which can
then be accessed in a view (like a JSP or Thymeleaf template). It's an optional attribute because Spring will try to bind
request parameters to this complex object using the names of its fields.

@CrossOrigin - It is an annotation in Spring Framework used to enable CORS for your application. It allows you to specify
which origins are permitted to access the APIs.

org.springframework.data.jpa.repository
@Entity -It is used to mark a class as a JPA entity, meaning it maps to a table in a relational database. It allows the
class to be managed by a JPA provider (like Hibernate) and defines that its instances can be persisted to and retrieved
from the database.
@GenerateValue - It is used with the @Id annotation to specify how the primary key value of an entity should be automatically
generated. This annotation is part of the Java Persistence API (JPA) and is commonly used with ORM frameworks like Hibernate.
@Table - Specifies table details (name, schema, catalog).
@Id - Marks the primary key field.
@GeneratedValue - Specifies the primary key generation strategy.
@Column - Customizes column mapping for fields.
@Transient - Marks a field as non-persistent (not mapped to a database column).
@Embeddable - Indicates that a class can be embedded in an entity.
jakarta.persistence
@Lob - annotation is used to specify that a persistent property or field should be mapped to a Large
Object (LOB) in the database. It is typically used for storing large binary data (like images, videos, files) or large
text data (like JSON strings, XML, or long descriptions).

@Query - annotation in Spring Data JPA is used to define custom JPQL (Java Persistence Query Language) or SQL queries
directly within a repository interface method. It provides a way to override the default query derivation mechanism and
create more complex or specific queries.

com.fasterxml.jackson.annotation
@JsonFormat - annotation in Spring (from the Jackson library) is used to customize how Java objects are serialized
into JSON or deserialized from JSON. It is commonly applied to date/time fields or other data types that require a
specific format in the JSON output.


Aspect annotation
@Aspect -
@Before -
@After -
@AfterThrowing -
@AfterReturning -
@Around -

Spring Security
@EnableWebSecurity- It is used in Spring Security to enable and configure web security for a Spring application. It
provides integration with the Spring Security framework to secure HTTP requests and implement features such as authentication,
authorization, and other security mechanisms.